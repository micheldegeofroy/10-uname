#!/bin/sh

# motd is generated with empty environment. This ensures that TERM is set, so that colors are displayed properly
#  src: https://unix.stackexchange.com/a/417223/31104
export TERM="${TERM:-xterm-256color}"

BOLD=$(tput bold)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
# VIOLET=$(tput setaf 5)
# SOME_COLOR=$(tput setaf 6)
WHITE=$(tput setaf 7)
RESET_STYLE=$(tput sgr0)

ln_path=$(command -v lnd)
if [ ! -z ${ln_path} ]; then
  ln_line1="lnd ⚡"
fi

ln_line1="${BLUE}lnd ${YELLOW}⚡"

lnd_user=$(ps -eo user:10,command | grep "[l]nd" | awk '{ print $1 }' | grep -v root)
if [ ! -z "${lnd_user}" ]; then
  data_dir="/home/${lnd_user}/.lnd/"

  INFO=$(lncli --lnddir=${data_dir} getinfo)
  version="$(echo ${INFO} | jq -r '.version')"
  network="$(echo ${INFO} | jq -r '.chains[0]')"
  testnet="$(echo ${INFO} | jq -r '.testnet')"
  if [ "${network}" != "bitcoin" ]; then
    network="${network}-"
  else
    network=""
  fi

  if [ "${testnet}" = true ]; then
    network="${network}testnet"
  else
    network="${network}mainnet"
  fi

  blocks="$(echo ${INFO} | jq -r '.block_height')"

  pubkey="$(echo ${INFO} | jq -r '.identity_pubkey')"
  peers_count=$(echo ${INFO} | jq '.num_peers')
  best_connstring=$(echo ${INFO} | jq -r '.uris[0]')

  BALANCE=$(lncli --lnddir=${data_dir} walletbalance)
  on_chain="$(echo ${BALANCE} | jq -r '.total_balance')"
  on_chain=$(printf "%0.8f\n" ${on_chain})

  CHANNELS=$(lncli --lnddir=${data_dir} listchannels)
  ch_open="$(echo ${CHANNELS} | jq '.channels | length')"

  channels_mine=$(echo ${CHANNELS} | jq '[.channels[].local_balance] | map(tonumber) | add | if . == null then 0 else . / 1e8 end')

  max_out=$(echo ${CHANNELS} | jq '[.channels[].local_balance] | map(tonumber) | max | if . == null then 0 else . / 1e8 end')
  if [ "${max_out}" != "0" ]; then
    max_send=" (max: ${max_out})"
  fi

  channels_their=$(echo ${CHANNELS} | jq '[.channels[] | .remote_balance] | map(tonumber) | add | if . == null then 0 else . / 1e8 end')

  max_in=$(echo ${CHANNELS} | jq '[.channels[] | .remote_balance] | map(tonumber) | max | if . == null then 0 else . / 1e8 end')
  if [ "${max_in}" != "0" ]; then
    max_receive=" (max: ${max_in})"
  fi

  PENDING_CHANNELS=$(lncli --lnddir=${data_dir} pendingchannels)
  ch_pending="$(echo ${PENDING_CHANNELS} | jq '.pending_open_channels | length')"
  ch_closing="$(echo ${PENDING_CHANNELS} | jq '[.pending_closing_channels, .pending_force_closing_channels, .waiting_close_channels] | map(length) | add')"

  ln_line1="${ln_line1} ${BLUE}${BOLD}(${version}, ${network})${RESET_STYLE}"
  ln_line2="id: ${BOLD}${pubkey}${RESET_STYLE}"
  ln_line3="peers connected: ${BOLD}${peers_count}${RESET_STYLE}\t${BLUE}synced to block: ${BOLD}${blocks}${RESET_STYLE}"
  ln_line4="channels: ${BOLD}${ch_all}${RESET_STYLE} (${YELLOW}${BOLD}pending: ${ch_pending}${RESET_STYLE}${BLUE}, ${GREEN}${BOLD}open: ${ch_open}${RESET_STYLE}${BLUE}, ${RED}${BOLD}closing: ${ch_closing}${RESET_STYLE}${BLUE})"
  ln_line5="balance:"
  ln_line6="on-chain: ${BOLD}${on_chain}${RESET_STYLE}\t${BLUE}LN spend  : ${BOLD}${channels_mine}${max_send}${RESET_STYLE}"
  ln_line7="\t\t\t\tLN receive: ${BOLD}${channels_their}${max_receive}${RESET_STYLE}"

  ln_line12="best connstring:"

  ln_line14="${BOLD}${best_connstring}"

else
  ln_line2="${RED}NOT RUNNING"
fi

echo "${YELLOW}         ____       ${BLUE}${ln_line1}${YELLOW}
        /   /         ${BLUE}${ln_line2}${YELLOW}
       /   /          ${BLUE}${ln_line3}${YELLOW}
      /   /_          ${BLUE}${ln_line4}${YELLOW}
     /_    /          ${BLUE}${ln_line5}${YELLOW}
      /   /             ${BLUE}${ln_line6}${YELLOW}
      /  /_           ${BLUE}${ln_line7}${YELLOW}
      /   /
      /  /          ${BLUE}${ln_line9}${YELLOW}
      / /             ${BLUE}${ln_line10}${YELLOW}
      //              ${BLUE}${ln_line11}${YELLOW}
      /               ${BLUE}${ln_line12}${YELLOW}
${ln_line14}
${RESET_STYLE}"
